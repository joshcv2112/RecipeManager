@page "/cookbook"

@inject HttpClient client

@using Newtonsoft.Json
@using Data

<h1>Cookbooks</h1>

<p>This is where a user will be able to create, read, update, and delete cookbooks.</p>



<div class="container-fluid">
    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center">Calling REST-APIs</h3>
    </div>
    <div class="row" style="margin:25px;">
        <strong>Get Operation </strong><hr />
        @if (Cookbooks != null)
        {
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Id</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Email</th>
                        @*<th>Avatar</th>*@
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Cookbooks)
                    {
                        <tr class="justify-content-center">
                            <td>@user.CookbookId</td>
                            <td>@user.Name</td>
                            <td>@user.Description</td>
                            <td>@user.ImageUrl</td>
                            @*<td><img src="@user.AvatarURI" height="30" width="30" /></td>*@
                        </tr>
                    }
                </tbody>
            </table>
        }
        @if (!Cookbooks.Any())
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }
    </div>
    <div class="row" style="margin:10px;margin-bottom:50px;">
        <div class="col"><button class="btn btn-info" @onclick="GetUser">Get Cookbooks</button></div>
    </div>
</div>


@code {
    List<CookbookModel> Cookbooks = new List<CookbookModel>();
    private async void GetUser()
    {
        var apiName = "api/Cookbooks";
        var httpResponse = await client.GetAsync(apiName);
        if (httpResponse.IsSuccessStatusCode)
        {
            List<CookbookModel> responseData = JsonConvert.DeserializeObject<List<CookbookModel>>(await httpResponse.Content.ReadAsStringAsync());
            Cookbooks = responseData;
            Console.WriteLine(responseData.ToString());
            StateHasChanged();
        }
    }

    List<CRUDUser> CRUDUsers = new List<CRUDUser>();
    CRUDUser crudUser = new CRUDUser();
    bool ShowCreateUserForm = true;
    private void ShowHideCreateUserForm()
    {
        ShowCreateUserForm = !ShowCreateUserForm;
    }
    private async Task CreateNewUser()
    {
        string apiName = "api/users";
        var postData = JsonConvert.SerializeObject(crudUser);
        var response = await client.PostAsync(apiName, new StringContent(postData));
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            CRUDUser user = JsonConvert.DeserializeObject<CRUDUser>(await response.Content.ReadAsStringAsync());
            if (user != null)
            {
                user.Name = crudUser.Name;
                user.Job = crudUser.Job;
                CRUDUsers.Add(user);
                crudUser = new CRUDUser();
            }
        }
    }
    CRUDUser selectedUser = new CRUDUser();
    bool ShowUpdateUserForm = true;
    private void ShowHideUpdateUserForm()
    {
        ShowUpdateUserForm = !ShowUpdateUserForm;
    }
    void UpdateSelectedUser(ChangeEventArgs e)
    {
        int id = int.Parse(e.Value.ToString());
        selectedUser = CRUDUsers.FirstOrDefault(u => u.Id == id);
    }
    private async Task UpdateUser()
    {
        string apiName = string.Format($"api/users/{selectedUser.Id}");
        var postData = JsonConvert.SerializeObject(selectedUser);
        var response = await client.PutAsync(apiName, new StringContent(postData));
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            CRUDUser user = JsonConvert.DeserializeObject<CRUDUser>(await response.Content.ReadAsStringAsync());
            if (user != null)
            {
                user.Id = selectedUser.Id;
                user.Name = selectedUser.Name;
                user.Job = selectedUser.Job;
                user.CreatedTimestamp = selectedUser.CreatedTimestamp;
                // Remove the old item from the list and replace it with the updated one
                var temp = CRUDUsers.FirstOrDefault(u => u.Id == selectedUser.Id);
                CRUDUsers.Remove(temp);
                CRUDUsers.Add(user);
            }
        }
    }
    bool ShowUpdateDeleteForm = true;
    private void ShowHideDeleteUserForm()
    {
        ShowUpdateDeleteForm = !ShowUpdateDeleteForm;
    }
    private async Task DeleteUser()
    {
        string apiName = string.Format($"api/users/{selectedUser.Id}");
        var response = await client.DeleteAsync(apiName);
        if (response.IsSuccessStatusCode)
        {
            var temp = CRUDUsers.FirstOrDefault(u => u.Id == selectedUser.Id);
            CRUDUsers.Remove(temp);
            selectedUser = new CRUDUser();
        }
    }
}



<NavLink class="nav-link" href="cookbook/new">
    <button class="btn btn-primary">New Cookbook</button>
</NavLink>

<table class="table">
    <thead>
        <tr>
            <th>Image</th>
            <th>Cookbook</th>
            <th>Owner</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><img src="https://99designs-blog.imgix.net/blog/wp-content/uploads/2017/03/rs_600x600-151214172230-600-chrissy-teigen-cravings-book-cover_copy-e1490054818956.jpg?auto=format&q=60&fit=max&w=930" class="cookbook-thumbnail" /></td>
            <td>Cookbook 1</td>
            <td>Joshua</td>
            <td>
                <a href="">Edit</a> |
                <a href="">Copy</a> |
                <a href="">Delete</a>
            </td>
            <td></td>
        </tr>
        <tr>

            <td><img src="https://th.bing.com/th/id/OIP.G1onRKG4OzpO7Ti4DtjXIgHaIV?pid=ImgDet&rs=1" class="cookbook-thumbnail" /></td>
            <td>Cookbook 2</td>
            <td>Joshua</td>
            <td>
                <a href="">Edit</a> |
                <a href="">Copy</a> |
                <a href="">Delete</a>
            </td>
            <td>Starred</td>
        </tr>
        <tr>
            <td><img src="https://www.rachaelraymag.com/.image/t_share/MTU5Njc0MzAwMzQ3OTgzMTc3/whole-foods-cookbook-cover.jpg" class="cookbook-thumbnail" /></td>
            <td>Cookbook 3</td>
            <td>Joshua</td>
            <td>
                <a href="">Edit</a> |
                <a href="">Copy</a> |
                <a href="">Delete</a>
            </td>
            <td></td>
        </tr>
    </tbody>
</table>
