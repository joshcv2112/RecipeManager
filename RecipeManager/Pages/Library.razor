@page "/library"

@inject HttpClient client

@using Newtonsoft.Json
@using Data

<h1>Cookbook Library</h1>

<div class="container-fluid">
    <button class="btn btn-success" hidden="@ShowNewButton" @onclick="ShowHideCreateUserForm">Add New</button>
    <div class="row" hidden="@ShowCreateUserForm" style="border:3px solid black;margin:20px;">
        <EditForm Model="@crudUser">
            <div class="row form-inline" style="margin:20px;">
                <div class="form-group" style="margin:15px;">
                    <label for="Name" style="margin:10px;">Name</label>
                    <InputText Id="Name" @bind-Value="@crudUser.Name"></InputText>
                </div>
                <div class="form-group" style="margin:15px;">
                    <label for="Description" style="margin:10px;">Description</label>
                    <InputText Id="Description" @bind-Value="@crudUser.Name"></InputText>
                </div>
                <div class="form-group" style="margin:15px;">
                    <label for="ImageUrl" style="margin:10px;">Image URL</label>
                    <InputText Id="ImageUrl" @bind-Value="@crudUser.Name"></InputText>
                </div>
                <button class="btn btn-success" @onclick="@CreateNewUser">Create</button>
            </div>
        </EditForm>
    </div>
    <div>
        @if (Cookbooks != null)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th></th>
                        <th>Cookbook</th>
                        <th>Description</th>
                        <th>Created By</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Cookbooks)
                    {
                        <tr class="justify-content-center">
                            <td><img src="@user.ImageUrl" class="cookbook-thumbnail" /></td>
                            <td>@user.Name</td>
                            <td>@user.Description</td>
                            <td>@user.UserId</td>
                            <td>
                                <a href="">Edit</a> |
                                <a href="">Copy</a> |
                                <a href="">Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        @if (!Cookbooks.Any())
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }
    </div>
</div>


@code {
    List<CRUDUser> CRUDUsers = new List<CRUDUser>();
    CRUDUser crudUser = new CRUDUser();
    bool ShowCreateUserForm = true, ShowNewButton = false;
    private void ShowHideCreateUserForm()
    {
        ShowCreateUserForm = !ShowCreateUserForm;
        ShowNewButton = !ShowNewButton;
    }
    private async Task CreateNewUser()
    {
        // DEMO CODE -- Modify this to post to my API
        //string apiName = "api/users";
        //var postData = JsonConvert.SerializeObject(crudUser);
        //var response = await client.PostAsync(apiName, new StringContent(postData));
        //if (response.IsSuccessStatusCode)
        //{
        //    var content = await response.Content.ReadAsStringAsync();
        //    CRUDUser user = JsonConvert.DeserializeObject<CRUDUser>(await response.Content.ReadAsStringAsync());
        //    if (user != null)
        //    {
        //        user.Name = crudUser.Name;
        //        user.Job = crudUser.Job;
        //        CRUDUsers.Add(user);
        //        crudUser = new CRUDUser();
        //    }
        //}
        ShowCreateUserForm = !ShowCreateUserForm;
        ShowNewButton = !ShowNewButton;
    }



    protected override async Task OnInitializedAsync()
    {
        await GetUser();
    }

    List<CookbookModel> Cookbooks = new List<CookbookModel>();
    private async Task GetUser()
    {
        var apiName = "api/Cookbooks";
        var httpResponse = await client.GetAsync(apiName);
        if (httpResponse.IsSuccessStatusCode)
        {
            List<CookbookModel> responseData = JsonConvert.DeserializeObject<List<CookbookModel>>(await httpResponse.Content.ReadAsStringAsync());
            Cookbooks = responseData;
            StateHasChanged();
        }
    }
}
