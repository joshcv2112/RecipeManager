@page "/library"

@inject HttpClient client

@using Newtonsoft.Json
@using Data
@using System.Text

<h1>Cookbook Library</h1>

<div class="container-fluid">
    @* Create new Cookbook form *@
    <button class="btn btn-success" hidden="@HideNewButton" @onclick="ShowHideCreateUserForm">Add New</button>
    <div class="row" hidden="@HideCreateUserForm" style="border:1px solid black;margin:20px;">
        <EditForm Model="@createCookbookModel">
            <div class="row form-inline" style="margin:20px;">
                <div class="form-group" style="margin:15px;">
                    <label for="Name" style="margin:10px;">Name</label>
                    <InputText Id="Name" @bind-Value="@createCookbookModel.Name"></InputText>
                </div>
                <div class="form-group" style="margin:15px;">
                    <label for="Description" style="margin:10px;">Description</label>
                    <InputText Id="Description" @bind-Value="@createCookbookModel.Description"></InputText>
                </div>
                <div class="form-group" style="margin:15px;">
                    <label for="ImageUrl" style="margin:10px;">Image URL</label>
                    <InputText Id="ImageUrl" @bind-Value="@createCookbookModel.ImageUrl"></InputText>
                </div>
                <button class="btn btn-success wowok" @onclick="@CreateNewUser">Create</button>
                <button class="btn btn-outline-warning wowok" @onclick="@ShowHideCreateUserForm">Cancel</button>
            </div>
        </EditForm>
    </div>

    @* Delete Cookbook form *@
    <div class="row" hidden="@HideDeleteCookbookForm" style="border:1px solid red;margin:20px;">
        <EditForm Model="@deleteCookbookModel">
            <div class="row form-inline" style="margin:20px;">
                <div class="form-group" style="margin:15px;">
                    <h4 style="margin:10px;">Are you absolutely sure you want to delete this cookbook? The cookbook and all related recipes will be deleted.</h4>
                </div>
                <div class="form-group" style="margin:15px;">
                    <label for="ImageUrl" style="margin:10px;">Please enter <b>&nbsp;@TargetedCookbook&nbsp;</b> to confirm.</label>
                    <InputText Id="ImageUrl" @bind-Value="@deleteCookbookModel.Name"></InputText>
                </div>
                <button class="btn btn-danger wowok" @onclick="@(() => DeleteCookbookButtonClicked(deleteCookbookModel))">Delete Cookbook</button>
                <button class="btn btn-outline-warning wowok" @onclick="@(HideDeleteCookbookDialog)">Cancel</button>
            </div>
        </EditForm>
    </div>

    <div>
        @if (Cookbooks != null)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th></th>
                        <th><h3 style="margin: 0px">Cookbook</h3></th>
                        <th><h3 style="margin: 0px">Created By</h3></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Cookbooks)
                    {
                        <tr class="justify-content-center">
                            <td><img src="@user.ImageUrl" class="cookbook-thumbnail" /></td>
                            <td style="vertical-align: middle"><h3>@user.Name</h3><br />@user.Description</td>
                            <td style="vertical-align: middle">@user.UserId<br />@user.CookbookId</td>
                            <td style="vertical-align: middle">
                                <button class="btn btn-outline-primary btn-sm">Edit</button>
                                <button class="btn btn-outline-secondary btn-sm">Copy</button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="@(() => ShowHideDeleteCookbookDialog(user))">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        @if (!Cookbooks.Any())
        {
            <div class="justify-content-center">
                <h5>No cookbooks found</h5>
            </div>
        }
    </div>
</div>

 
@code {
    #region OnPageLoad
    protected override async Task OnInitializedAsync()
    {
        await GetCookbooksForCurrentUser();
    }
    List<CookbookModel> Cookbooks = new List<CookbookModel>();
    private async Task GetCookbooksForCurrentUser()
    {
        var apiName = "api/Cookbooks";
        var httpResponse = await client.GetAsync(apiName);
        if (httpResponse.IsSuccessStatusCode)
        {
            List<CookbookModel> responseData = JsonConvert.DeserializeObject<List<CookbookModel>>(await httpResponse.Content.ReadAsStringAsync());
            Cookbooks = responseData;
            StateHasChanged();
        }
    }
    #endregion

    #region CreateCookbook
    CreateCookbookModel createCookbookModel = new CreateCookbookModel();
    bool HideCreateUserForm = true, HideDeleteCookbookForm = true;
    bool HideNewButton = false;
    private void ShowHideCreateUserForm()
    {
        HideCreateUserForm = !HideCreateUserForm;
        HideNewButton = !HideNewButton;
    }
    private async Task CreateNewUser()
    {
        string apiName = "api/cookbooks";
        var postData = new StringContent(JsonConvert.SerializeObject(createCookbookModel), Encoding.UTF8, "application/json");
        var response = await client.PostAsync(apiName, postData);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            CookbookModel user = JsonConvert.DeserializeObject<CookbookModel>(await response.Content.ReadAsStringAsync());
            if (user != null)
                createCookbookModel = new CreateCookbookModel();
        }
        HideCreateUserForm = !HideCreateUserForm;
        HideNewButton = !HideNewButton;
        await OnInitializedAsync();
    }
    #endregion

    #region DeleteCookbook
    string TargetedCookbook = "";
    Guid CookbookIdToBeDeleted = new Guid();
    DeleteCookbookModel deleteCookbookModel = new DeleteCookbookModel();
    public void ShowHideDeleteCookbookDialog(CookbookModel cookbook)
    {
        CookbookIdToBeDeleted = cookbook.CookbookId;
        TargetedCookbook = cookbook.Name;
        HideDeleteCookbookForm = !HideDeleteCookbookForm;
        HideCreateUserForm = true;
        HideNewButton = !HideNewButton;
    }
    public void HideDeleteCookbookDialog()
    {
        HideDeleteCookbookForm = true;
        HideCreateUserForm = true;
        HideNewButton = false;
        deleteCookbookModel = new DeleteCookbookModel();
    }
    public async void DeleteCookbookButtonClicked(DeleteCookbookModel cookbook)
    {
        if (cookbook.Name == TargetedCookbook)
        {
            HideDeleteCookbookForm = true;
            HideNewButton = false;
            cookbook.CookbookId = CookbookIdToBeDeleted;
            await DeleteCookbook(cookbook);
            return;
        }
        Console.WriteLine("FAIL");
    }
    private async Task DeleteCookbook(DeleteCookbookModel cookbook)
    {
        string apiName = string.Format($"api/Cookbooks/{cookbook.CookbookId}");
        var response = await client.DeleteAsync(apiName);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Successfully deleted cookbook: " + cookbook.Name + " ("+ cookbook.CookbookId + ")");
            await OnInitializedAsync();
        }
        HideDeleteCookbookDialog();
    }
    #endregion
}
