@using RecipeManager.UI.Data;
@using Newtonsoft.Json;
@using System.Text;
@using System.Net.Http;
@using Microsoft.AspNetCore.Http;
@using System.Security.Claims;
@inject IHttpContextAccessor httpContextAccessor;

<div class="row" style="border:1px solid black;margin:20px;">
    <EditForm Model="@cookbookDto">
        <div class="row form-inline" style="margin:20px;">
            <div class="form-group" style="margin:15px;">
                <label for="Name" style="margin:10px;">Name</label>
                <InputText Id="Name" @bind-Value="@cookbookDto.Name"></InputText>
            </div>
            <div class="form-group" style="margin:15px;">
                <label for="Description" style="margin:10px;">Description</label>
                <InputText Id="Description" @bind-Value="@cookbookDto.Description"></InputText>
            </div>
            <div class="form-group" style="margin:15px;">
                <label for="ImageUrl" style="margin:10px;">Image URL</label>
                <InputText Id="ImageUrl" @bind-Value="@cookbookDto.ImageUrl"></InputText>
            </div>
            <button class="btn btn-success" style="margin: 10px; margin-bottom: 15px;" @onclick="@CreateNewUser">Create</button>
            <button class="btn btn-outline-warning" style="margin: 10px; margin-bottom: 15px;">Cancel</button>
        </div>
    </EditForm>
</div>

@code {
    private CookbookDto cookbookDto = new CookbookDto();
    private HttpClient Http = new HttpClient();
    private string UserId;

    private async Task CreateNewUser()
    {
        string apiName = "https://localhost:5011/api/cookbooks";
        cookbookDto.UserId = GetUserId();
        var postData = new StringContent(JsonConvert.SerializeObject(cookbookDto), Encoding.UTF8, "application/json");
        var response = await Http.PostAsync(apiName, postData);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            CookbookDto user = JsonConvert.DeserializeObject<CookbookDto>(await response.Content.ReadAsStringAsync());
            if (user != null)
            {
                cookbookDto = new CookbookDto();
            }
        }
        // Comment this out for now, it may not be needed
        // RestoreInitialState();
        await OnInitializedAsync();
    }

    private Guid GetUserId()
    {
        UserId = httpContextAccessor.HttpContext.User.Identity.Name;
        var principal = httpContextAccessor.HttpContext.User;
        Console.WriteLine(principal.FindFirstValue(ClaimTypes.NameIdentifier));
        return new Guid(principal.FindFirstValue(ClaimTypes.NameIdentifier));
    }
}
