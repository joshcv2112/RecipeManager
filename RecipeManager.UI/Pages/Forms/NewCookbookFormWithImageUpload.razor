@using RecipeManager.UI.Data;
@using Newtonsoft.Json;
@using System.Text;
@using System.Net.Http;
@using Microsoft.AspNetCore.Http;
@using System.Security.Claims;
@inject IHttpContextAccessor httpContextAccessor;

@using System.IO;
@using Microsoft.AspNetCore.Hosting;
@inject IWebHostEnvironment _env;

@using Azure.Storage.Blobs;
@using Azure.Storage.Blobs.Models;
@using System;
@using System.Threading.Tasks;

<div class="row" style="border:1px solid black;margin:20px;">
    <EditForm Model="@cookbookDto">
        <div class="row form-inline" style="margin:20px;">
            <div class="form-group" style="margin:15px;">
                <label for="Name" style="margin:10px;">Name</label>
                <InputText Id="Name" @bind-Value="@cookbookDto.Name"></InputText>
            </div>
            <div class="form-group" style="margin:15px;">
                <label for="Description" style="margin:10px;">Description</label>
                <InputText Id="Description" @bind-Value="@cookbookDto.Description"></InputText>
            </div>
            <InputFile id="inputDefault" OnChange="OnInputFileChange" accept="image/png,image/gif,image/jpeg" style="margin-left: 30px;"/>
            <button class="btn btn-success" style="margin: 10px; margin-bottom: 15px;" @onclick="@CreateNewUser">Create</button>
            <button class="btn btn-outline-warning" style="margin: 10px; margin-bottom: 15px;">Cancel</button>
        </div>
    </EditForm>
</div>

@code {
    private CookbookDto cookbookDto = new CookbookDto();
    private HttpClient Http = new HttpClient();
    private string UserId;

    private async Task CreateNewUser()
    {
        string apiName = "https://localhost:5011/api/cookbooks";
        cookbookDto.UserId = GetUserId();

        if (x != null)
        {
            var url = await SaveFile(x.File);
        }
        else
        {
            Console.WriteLine("Image is null, you should upload one.");
        }

        var postData = new StringContent(JsonConvert.SerializeObject(cookbookDto), Encoding.UTF8, "application/json");
        var response = await Http.PostAsync(apiName, postData);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            CookbookDto user = JsonConvert.DeserializeObject<CookbookDto>(await response.Content.ReadAsStringAsync());
            if (user != null)
            {
                cookbookDto = new CookbookDto();
            }
        }

        await OnInitializedAsync();
    }

    private Guid GetUserId()
    {
        UserId = httpContextAccessor.HttpContext.User.Identity.Name;
        var principal = httpContextAccessor.HttpContext.User;
        Console.WriteLine(principal.FindFirstValue(ClaimTypes.NameIdentifier));
        return new Guid(principal.FindFirstValue(ClaimTypes.NameIdentifier));
    }

    IReadOnlyList<IBrowserFile> files;
    string dropClass = string.Empty;
    const int maxFileSize = 10485760;

    InputFileChangeEventArgs x;

    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        dropClass = string.Empty;
        try
        {
            if (e.FileCount > 1)
            {
                // TODO: Make multiple files a non-supported use case.
            }
            else
            {
                files = null;
                x = e;
                // This is where the upload to blob actually happened.
                //var url = await SaveFile(e.File);
                //urls.Clear();
                //urls.Add(url);
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex.Message);
            throw;
        }
    }

    private async Task<string> SaveFile(IBrowserFile file)
    {
        var guid = Guid.NewGuid().ToString();
        var relativePath = Path.Combine("uploads", guid);
        using (var stream = file.OpenReadStream(maxFileSize))
        {
            using (var mstream = new MemoryStream())
            {
                Console.WriteLine("START OF THING");
                await stream.CopyToAsync(mstream);
                mstream.Position = 0;
                string connectionString = Environment.GetEnvironmentVariable("AZURE_STORAGE_CONNECTION_STRING");
                BlobServiceClient blobServiceClient = new BlobServiceClient(connectionString);

                // Use user Guid here instead for container name?
                string containerName = "thonkcontainer" + Guid.NewGuid().ToString();
                BlobContainerClient containerClient = await blobServiceClient.CreateBlobContainerAsync(containerName, PublicAccessType.Blob);
                string fileName = "ThonkTime.PNG";
                BlobClient blobClient = containerClient.GetBlobClient(fileName);
                Console.WriteLine("Uploading to Blob storage as blob:\n\t {0}\n", blobClient.Uri);
                await blobClient.UploadAsync(mstream);
                cookbookDto.ImageUrl = blobClient.Uri.ToString();
            }
        }
        var url = Path.Combine(relativePath, file.Name).Replace("\\", "/");
        return url;
    }
}
