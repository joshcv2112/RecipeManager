@page "/fileuploadexample"
@using System.IO;
@using Microsoft.AspNetCore.Hosting;
@inject IWebHostEnvironment _env;

@using Azure.Storage.Blobs;
@using Azure.Storage.Blobs.Models;
@using System;
@using System.Threading.Tasks;

<h1>.NET 5.0 Blazor InputFile Options</h1>
<p>Investigating the <b>InputFile</b> component</p>

<p>Code example from: https://romansimuta.com/posts/drag-and-drop-file-uploading-with-net-5-0-blazor-inputfile-component/</p>

<div>
    <div class="inputArea">
        <InputFile id="inputDefault"
                   OnChange="OnInputFileChange"
                   accept="image/png,image/gif,image/jpeg" />
    </div>
    <div class="dropArea @dropClass">
        Drag and drop your files here or click to open file loading dialogue...
        <InputFile id="inputDrop"
                   OnChange="OnInputFileChange"
                   @ondragenter="HandleDragEnter"
                   @ondragleave="HandleDragLeave"
                   multiple />
    </div>

    @if (files != null && files.Count > 1)
    {
        <div>
            <ul>
                @foreach (var file in files)
                {
                    <li>@file.Name</li>
                }
            </ul>
        </div>
    }
    @if (urls.Count > 0)
    {
        foreach (var url in urls)
        {
            <br />
            <a href="@url" download>@url</a>
        }
    }
</div>


@code {
    IReadOnlyList<IBrowserFile> files;
    List<string> urls = new List<string>();
    string dropClass = string.Empty;
    const int maxFileSize = 10485760;

    private void HandleDragEnter()
    {
        dropClass = "dropAreaDrug";
    }

    private void HandleDragLeave()
    {
        dropClass = string.Empty;
    }

    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        dropClass = string.Empty;
        try
        {
            if (e.FileCount > 1)
            {
                files = e.GetMultipleFiles();
                urls.Clear();
                urls.AddRange(await SaveFiles(files));
            }
            else
            {
                files = null;

                var url = await SaveFile(e.File);
                urls.Clear();
                urls.Add(url);
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex.Message);
            throw;
        }
    }

    private async Task<List<string>> SaveFiles(IReadOnlyList<IBrowserFile> files)
    {
        var list = new List<string>();
        var guid = Guid.NewGuid().ToString();
        foreach (var file in files)
        {
            var url = await SaveFile(file, guid);
            list.Add(url);
        }
        return list;
    }

    private async Task<string> SaveFile(IBrowserFile file, string guid = null)
    {
        if (guid == null)
        {
            guid = Guid.NewGuid().ToString();
        }

        var relativePath = Path.Combine("uploads", guid);
        var dirToSave = Path.Combine(_env.WebRootPath, relativePath);
        var di = new DirectoryInfo(dirToSave);
        if (!di.Exists)
        {
            di.Create();
        }

        var filePath = Path.Combine(dirToSave, file.Name);
        using (var stream = file.OpenReadStream(maxFileSize))
        {
            using (var mstream = new MemoryStream())
            {
                Console.WriteLine("START OF THING");

                await stream.CopyToAsync(mstream);
                mstream.Position = 0;

                string connectionString = Environment.GetEnvironmentVariable("AZURE_STORAGE_CONNECTION_STRING");
                Console.WriteLine(connectionString);
                // Deprecated
                //var storageAccount = CloudStorageAccount.Parse(connectionString);
                // use this instead
                BlobServiceClient blobServiceClient = new BlobServiceClient(connectionString);
                string containerName = "thonkcontainer" + Guid.NewGuid().ToString();
                // containers by default aren't giving anonymous read access to the blobs. I should fix that, or set up one blob in advance.
                BlobContainerClient containerClient = await blobServiceClient.CreateBlobContainerAsync(containerName, PublicAccessType.Blob);
                string fileName = "ThonkTime.PNG";
                BlobClient blobClient = containerClient.GetBlobClient(fileName);
                Console.WriteLine("Uploading to Blob storage as blob:\n\t {0}\n", blobClient.Uri);

                await blobClient.UploadAsync(mstream);

                Console.WriteLine("DONE");
                //// instead of this, upload to azure blob storage...
                //await File.WriteAllBytesAsync(filePath, mstream.ToArray());
            }
        }

        var url = Path.Combine(relativePath, file.Name).Replace("\\", "/");
        return url;
    }
}